
// Executes a series of queries to initialize the database for usage (conditionally)

const mysql = require('mysql2')
const chalk = require('chalk');


const credentials = require('./../config/credentials.json')


// retrieves an active connection to the DB
function getConnection() {
	return mysql.createConnection(credentials)
}

function _query(query, callback) {
    if(!callback) {
        console.error("\n\nCannot call _query without providing a callback object!!\n\n");
        return;
    }

	if(!callback.success || !callback.failure) {
		console.error("\n\nCannot call _query without providing an object with a success & failure callback!!\n\n");
		return;

	}

	getConnection().query(query, function(error, results, fields) {
		if(error) {
			// query failed
			console.error("\n"+chalk.red("~ bad query:")+" query failed for '"+query+'" with error: '+error+"\n");
			callback.failure(error);

		} else {
			// query succeeded
			console.log(chalk.blue("*")+" query made for '"+query+'"');
			callback.success(results);

		}
	})
}


function _preparedQuery(query, data, callback) {
	if(!callback) {
		console.error("\n\nCannot call _query without providing a callback object!!\n\n");
		return;
	}

	if(!callback.success || !callback.failure) {
		console.error("\n\nCannot call _query without providing an object with a success & failure callback!!\n\n");
		return;

	}

	getConnection().query(query, data, function(error, results, fields) {
		if(error) {
			// query failed
			console.error("\n"+chalk.red("~ bad query:")+" query failed for '"+query+'" with error: '+error+"\n");
			callback.failure(error);

		} else {
			// query succeeded
			console.log(chalk.blue("*")+" query made for '"+query+'"');
			callback.success(results);

		}
	})
}


// Attempts to setup the DB if not done so already
function setupDB() {
	let userHistoryQuery = "CREATE TABLE IF NOT EXISTS user_history (id INT PRIMARY KEY AUTO_INCREMENT, user_id INT NOT NULL, createdAt DATETIME DEFAULT CURRENT_TIMESTAMP, resistance INT NOT NULL, tolerance INT NOT NULL, colors VARCHAR(100) NOT NULL, descrip VARCHAR(200) NOT NULL)engine=InnoDB;";
	let usersQuery ="CREATE TABLE IF NOT EXISTS users (id INT PRIMARY KEY AUTO_INCREMENT, createdAt DATETIME NOT NULL, username VARCHAR(120), token VARCHAR(200) NOT NULL)engine=InnoDB;";
	let sessionsQuery = "CREATE TABLE IF NOT EXISTS sessions (id INT PRIMARY KEY AUTO_INCREMENT, createdAt DATETIME NOT NULL, user_id INT NOT NULL, token VARCHAR(200) NOT NULL)engine=InnoDB;";

	_query(userHistoryQuery, {
		success: function() {
			console.info(chalk.blue("*")+" user_history table conditionally autogenerated");
		},
		failure: function() {
			console.error(chalk.red("~")+" user_history was unable to be autogenerated");
		}
	})

	_query(usersQuery, {
		success: function() {
			console.info(chalk.blue("*")+" users table conditionally autogenerated");
		},
		failure: function() {
			console.error(chalk.red("~")+" users was unable to be autogenerated");
		}
	})

	_query(sessionsQuery, {
		success: function() {
			console.info(chalk.blue("*")+" sessions table conditionally autogenerated");
		},
		failure: function() {
			console.error(chalk.red("~")+" sessions was unable to be autogenerated");
		}
	})

}


// adds history for the current user
function addHistory(data, callback) {
	if(!data.user_id) {
		throw "Missing 'user_id' in data for adding history, this will be under the session variable"
	}

	if(!data.resistance) {
		throw "Missing 'resistance' value!"
	}

	if(!data.tolerance) {
		throw "Missing 'tolerance' value! If not using this passing any arbitrary integer for this key is acceptable."
	}

	if(!data.colors) {
		throw "Missing 'colors' value!"
	}

	if(!data.descrip) {
		throw "Missing 'descrip' value!"
	}

	_preparedQuery("INSERT INTO user_history (user_id,resistance,tolerance,colors,descrip) VALUES (?,?,?,?,?)", [
		data.user_id,
		data.resistance,
		data.tolerance,
		data.colors,
		data.descrip
	], callback)
}


// Gets recent user lookups for the current user, limited to 100 in ascending date order
function getUserHistory(data,callback) {
	_preparedQuery(
		"SELECT * FROM user_history WHERE user_id=? ORDER BY createdAt DESC LIMIT 100",
		[data.user_id],
		callback
	)
}


// logs in the current user, signing them up automatically if needed
function loginUser(data, callback) {
	// password-less login
	if(!data.username) {
		throw "Missing 'username' value in loginUser data request!"
	}

	if(!data.token) {
		throw "Missing session 'token' (id) value to associate with this user!"
	}

	// check if this user exists
	getConnection().query("SELECT id FROM users WHERE username=?", [data.username], function(error, results, fields) {
		if(error) {
			console.error(chalk.red("~ ")+"An error occurred checking if a user exists: "+error);
			return
		}
		if(results.length > 0) {
			// create a new session for this existing user
			let user_id = results[0].id
			// clean up existing sessions, just in case
			_preparedQuery("DELETE FROM sessions WHERE user_id=?", [user_id], {
				success: function() {
					// generate a new session for this user
					_preparedQuery("INSERT INTO sessions (createdAt,user_id,token) VALUES (NOW(),?,?)", [user_id,data.token], callback)
				},
				failure: function() {
					console.error("~ Failed to clean up existing sessions on login, 1")
				}
			})

		} else {
			// create a new user first
			_preparedQuery("INSERT INTO users (createdAt,username,token) VALUES (NOW(),?,?)", [data.username, data.token], {
				success:function() {
					// get user_id for this newly created user now
					_preparedQuery("SELECT id FROM users WHERE username=?", [data.username], {
						success: function(results) {
                            let user_id = results[0].id
							// clean up existing sessions, just in case
							_preparedQuery("DELETE FROM sessions WHERE user_id=?", [user_id], {
								success: function() {
									// generate a new session for this user
									_preparedQuery("INSERT INTO sessions (createdAt,user_id,token) VALUES (NOW(),?,?)", [user_id,data.token], callback)
								},
								failure: function() {
									console.error("~ Failed to clean up existing sessions on login, 2")
								}
							})
						},
						failure: function() {
							console.error("\n~ Failed to get user_id for newly created user\n")
						}
					})
				},
				failure: function() {
					console.error("\n~ Failed to create new user on login\n")
				}
			})
		}
	})
}


// get the current user, will fire 'failure' if no user is currently logged in
function getCurrentUser(data, callback) {
	if(!data.token) {
		throw "Missing 'token' to verify a user is currently logged in!";
	}

	_preparedQuery("SELECT user_id FROM sessions WHERE token=?", [data.token], {
		success: function(resp) {
			if(resp.length > 0) {
                // return this user's data
                _preparedQuery("SELECT * FROM users WHERE id=? LIMIT 1", [resp[0].user_id], callback)

            } else {
				callback.failure({error: "No matching user found for the current session: "+data.token})
			}

		},
		failure: function(error) {
			// indicate this failed at some point
			callback.failure({error: "No user currently logged in for token: "+data.token});
		}
	})
}


// logs out the current user
function logoutUser(data, callback) {
	if(!data.token) {
		throw "Missing 'token' to logout user with in logoutUser call!"
	}

	_preparedQuery("DELETE FROM sessions WHERE token=?", [data.token], callback)
}

// always attempt to setup the DB
setupDB();

module.exports = {
	addHistory,
	getUserHistory,
	loginUser,
	getCurrentUser,
	logoutUser
}
